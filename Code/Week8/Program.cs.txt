/*
 * Student: Adam Wight
 * Class: CIS274M XML Programming
 * Instructor: Ed Cauthorn
 */

using System;
using System.IO;
using System.Xml;
using System.Xml.Linq;
using CIS274_XML_Programming_Project.Conversion;

namespace CIS274_XML_Programming_Project
{
    class Program
    {
        private static string outputPath = @"H:\Projects\School\CIS274 XML Programming\ScriptOutput\week8.xml";
        private static string csvFolderPath = @"H:\Projects\School\CIS274 XML Programming\Resources\CSV";
        private static string textFolderPath = @"H:\Projects\School\CIS274 XML Programming\Resources\Text";

        private static string targetNewPoemPath = @"H:\Projects\School\CIS274 XML Programming\ScriptOutput\";

        internal static string[] supportedConversionFormats = { "csv", "txt" };

        static void Main(string[] args)
        {
            CreateDocument(".csv", csvFolderPath);
            ContinuePrompt();
        }

        /// <summary>
        /// Creates an XDocument with a set of documents from the documents folder and saves it to the script output folder.
        /// </summary>
        public static void CreateDocument(string extension, string folder)
        {
            string[] files = Directory.GetFiles(folder);
            foreach (string file in files)
            {
                if (Path.HasExtension(file))
                {
                    string pathExt = Path.GetExtension(file);
                    if (pathExt == extension || pathExt == $".{extension}")
                    {
                        var aggregator = new FileAggregator(folder);
                        XElement rootElement;
                        ToXml converter;

                        switch (extension)
                        {
                            case ".csv":
                                rootElement = new XElement("SheetSet");
                                converter = new CsvToXml();
                                break;
                            case ".txt":
                                rootElement = new XElement("DocumentSet");
                                converter = new TxtToXml();
                                break;
                            default:
                                throw new NotSupportedException($"{extension} is not a supported file format\r\n" +
                                                                $"Make sure only files of ONE of the following formats is in the folder: {supportedConversionFormats.ShowElements()}.");
                        }

                        var doc = new XDocument();
                        doc.Add(aggregator.ConvertFilesToXml(rootElement, converter));
                        doc.Save(outputPath);
                    }
                }
            }
        }

        /// <summary>
        /// Gets a new document (poem) from wikisource.org via a GET HTTPrequest, then parses the HTTPresponse.
        /// </summary>
        public static void GetNewDocumentFromWeb()
        {
            var handler = new WebHandler();
            handler.GetResponse(handler.SendRequest(@"https://en.wikisource.org/wiki/Ozymandias_(Shelley)", "GET"));
            var converter = new WikiTextPuller();
            converter.ConvertWikiPoemToPlainText(handler.SavedResponse, targetNewPoemPath);
        }

        /// <summary>
        /// Uses the XML DOM to find and remove all elements matching <paramref name="identifiers"/> (which are either a DocumentTitle element or an ID attribute)
        /// </summary>
        /// <param name="identifiers">A set of identifiers for XML nodes; each string can be an ID attribute value OR a DocumentTitle element value</param>
        public static void RemoveDocumentsViaDom(string[] identifiers)
        {
            var doc = new XmlDocument();
            string inputPath = @"H:\Projects\School\CIS274 XML Programming\Resources\XML\week6.xml";
            doc.Load(inputPath);

            XmlNode root = doc.DocumentElement;

            var handler = new DomHandler(doc, root);

            foreach (string id in identifiers)
            {
                XmlNode node = handler.FindNode(id);
                if (node != null)
                {
                    root.RemoveChild(node);
                }
                else
                {
                    Console.WriteLine($"Could not find any matches to ID: {id} in {inputPath}");
                }
            }

            doc.Save(outputPath);
        }

        /// <summary>
        /// Prompts the user to continue by pressing enter.
        /// </summary>
        public static void ContinuePrompt()
        {
            Console.WriteLine("Press Enter to continue...");
            Console.ReadLine();
        }
    }
}